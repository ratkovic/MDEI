// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// setupGCV
List setupGCV(arma::vec y, arma::mat X, arma::vec alphas);
RcppExport SEXP _MDEI_setupGCV(SEXP ySEXP, SEXP XSEXP, SEXP alphasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    rcpp_result_gen = Rcpp::wrap(setupGCV(y, X, alphas));
    return rcpp_result_gen;
END_RCPP
}
// update
List update(List L, double tol);
RcppExport SEXP _MDEI_update(SEXP LSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(update(L, tol));
    return rcpp_result_gen;
END_RCPP
}
// GCV
List GCV(arma::vec y, arma::mat X, arma::vec alphas, double tol);
RcppExport SEXP _MDEI_GCV(SEXP ySEXP, SEXP XSEXP, SEXP alphasSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(GCV(y, X, alphas, tol));
    return rcpp_result_gen;
END_RCPP
}
// checkcor
arma::vec checkcor(arma::mat X, double thresh);
RcppExport SEXP _MDEI_checkcor(SEXP XSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(checkcor(X, thresh));
    return rcpp_result_gen;
END_RCPP
}
// namesAndCorrs
List namesAndCorrs(arma::mat XSubsamp, arma::vec ySubsamp, arma::mat treatSubsamp, arma::mat XConstruct, arma::mat treatConstruct, arma::mat XConstructDerivative, arma::mat treatConstructDerivative, long long unsigned int a);
RcppExport SEXP _MDEI_namesAndCorrs(SEXP XSubsampSEXP, SEXP ySubsampSEXP, SEXP treatSubsampSEXP, SEXP XConstructSEXP, SEXP treatConstructSEXP, SEXP XConstructDerivativeSEXP, SEXP treatConstructDerivativeSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type XSubsamp(XSubsampSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ySubsamp(ySubsampSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type treatSubsamp(treatSubsampSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XConstruct(XConstructSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type treatConstruct(treatConstructSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XConstructDerivative(XConstructDerivativeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type treatConstructDerivative(treatConstructDerivativeSEXP);
    Rcpp::traits::input_parameter< long long unsigned int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(namesAndCorrs(XSubsamp, ySubsamp, treatSubsamp, XConstruct, treatConstruct, XConstructDerivative, treatConstructDerivative, a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MDEI_setupGCV", (DL_FUNC) &_MDEI_setupGCV, 3},
    {"_MDEI_update", (DL_FUNC) &_MDEI_update, 2},
    {"_MDEI_GCV", (DL_FUNC) &_MDEI_GCV, 4},
    {"_MDEI_checkcor", (DL_FUNC) &_MDEI_checkcor, 2},
    {"_MDEI_namesAndCorrs", (DL_FUNC) &_MDEI_namesAndCorrs, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_MDEI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
